{"version":3,"sources":["Garden.js","App.js","reportWebVitals.js","index.js"],"names":["Garden","props","getNbOfEmojis","state","garden","filter","elem","emoji","length","addPlant","growGarden","newGarden","find","setState","map","setTimeout","deleteEmoji","id","count","ligne","this","cell","index","className","onClick","type","React","Component","App","generateGarden","size","i","push","addGarden","newFarm","farm","SIZE_GARDEN","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAqEeA,E,kDAjEX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAQVC,cAAgB,WAEZ,OADiB,EAAKC,MAAMC,OAAOC,QAAQ,SAACC,GAAD,MAAyB,KAAfA,EAAKC,SACxCC,QAXH,EAcnBC,SAAW,WAEP,GADA,EAAKC,aACD,EAAKR,gBAAkB,GAAI,CAC3B,IAAIS,EAAS,YAAO,EAAKR,MAAMC,QAC/BO,EAAUC,MAAK,SAAAN,GAAI,MAAmB,KAAfA,EAAKC,SAAcA,MAAQ,eAClD,EAAKM,SAAS,CAAET,OAAQO,MAnBb,EAuBnBD,WAAa,WACT,IAAIC,EAAS,YAAO,EAAKR,MAAMC,QAC/BO,EAAUG,KAAI,SAACR,GACX,MAAkB,iBAAfA,EAAKC,MAAuBD,EAAKC,MAAQ,eAC1B,iBAAfD,EAAKC,MAAuBD,EAAKC,MAAQ,eAChCD,EAAKC,SAErB,EAAKM,SAAS,CAAET,OAAQO,IACpB,EAAKT,gBAAkB,GACvBa,YAAW,WACP,EAAKL,eACN,MAlCQ,EAsCnBM,YAAc,SAACC,GACX,IAAIN,EAAS,YAAO,EAAKR,MAAMC,QAC/BO,EAAUM,GAAIV,MAAQ,GACtB,EAAKM,SAAS,CAAET,OAAQO,EAAWO,MAAO,EAAKf,MAAMe,MAAQ,KAvC7D,EAAKf,MAAQ,CAAEC,OAAQH,EAAMG,QAFd,E,0CA6CnB,WAAU,IAAD,OACDe,EAAQC,KAAKjB,MAAMC,OAAOU,KAAI,SAACO,EAAMC,GACrC,OACI,qBAAKC,UAAU,OAAqBC,QAAS,kBAAM,EAAKR,YAAYK,EAAKJ,KAAzE,SACKI,EAAKd,OADiBc,EAAKJ,OAIpC,OACI,qCACA,qBAAKM,UAAU,iBAAf,SACKJ,IAEL,qBAAKI,UAAU,gBAAf,SACI,wBAAQN,GAAG,gBAAgBQ,KAAK,SAASD,QAASJ,KAAKX,SAAvD,qC,GA3DCiB,IAAMC,WCsDZC,E,kDApDb,WAAY3B,GAAQ,IAAD,8BACf,cAAMA,IAMV4B,eAAiB,SAACC,GAEd,IADA,IAAInB,EAAY,GACPoB,EAAI,EAAGA,EAAID,EAAMC,IACtBpB,EAAUqB,KAAK,CAAEf,GAAIc,EAAGxB,MAAO,KAEnC,OAAOI,GAZQ,EAenBsB,UAAY,SAACH,GACT,IAAII,EAAO,YAAO,EAAK/B,MAAMgC,MAC7BD,EAAQF,KAAK,EAAKH,eAAeC,IACjC,EAAKjB,SAAU,CAACsB,KAAMD,KAhBtB,EAAK/B,MAAQ,CAAEgC,KAAM,IACrB,EAAKC,YAAc,GAHJ,E,qDAqBnB,WAEIhB,KAAKa,UAAUb,KAAKgB,e,gCAIxB,WACIC,QAAQC,IAAI,OAAQlB,KAAKjB,MAAMgC,Q,oBAGnC,WAAU,IAAD,OACP,OACE,qCACA,yDAEA,qBAAKZ,UAAU,gBAAf,SACI,wBAAQC,QAAS,kBAAM,EAAKS,UAAU,EAAKG,cAAcnB,GAAG,iBAAiBQ,KAAK,SAAlF,4BAGHL,KAAKjB,MAAMgC,KAAKrB,KAAI,SAACR,GAClB,OACI,qBAAKiB,UAAU,gBAAf,SACI,cAAC,EAAD,CAAQnB,OAAQE,gB,GA5ChBoB,IAAMC,WCQTY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cc7f5611.chunk.js","sourcesContent":["import React from 'react'\nimport \"./Garden.css\"\n\nclass Garden extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { garden: props.garden}\n    }\n\n    // componentDidUpdate() {\n    //     console.log(\"nb of emojis\", this.getNbOfEmojis())\n    // }\n\n    getNbOfEmojis = () => {\n        let nbOfEmojis = this.state.garden.filter( (elem) => elem.emoji !== \"\")\n        return nbOfEmojis.length\n    }\n\n    addPlant = () => {\n        this.growGarden()\n        if (this.getNbOfEmojis() < 25) {\n            let newGarden = [...this.state.garden]\n            newGarden.find(elem => elem.emoji === \"\").emoji = \"ðŸŒ±\";\n            this.setState({ garden: newGarden })\n        }\n    }\n\n    growGarden = () => {\n        let newGarden = [...this.state.garden];\n        newGarden.map((elem) => {\n            if(elem.emoji === \"ðŸŒ±\") return elem.emoji = \"ðŸŒ¿\"\n            if(elem.emoji === \"ðŸŒ¿\") return elem.emoji = \"ðŸŒ³\"\n            else return elem.emoji\n        })\n        this.setState({ garden: newGarden })\n        if (this.getNbOfEmojis() > 0) {\n            setTimeout(() => {\n                this.growGarden()\n            }, 2000);\n        }\n    }\n\n    deleteEmoji = (id) => {\n        let newGarden = [...this.state.garden]\n        newGarden[id].emoji = ''\n        this.setState({ garden: newGarden, count: this.state.count - 1 })\n        //this.setState({ count: this.state.count - 1 })\n    }\n\n    render() {\n        let ligne = this.state.garden.map((cell, index) => {\n            return(\n                <div className=\"cell\" key={cell.id} onClick={() => this.deleteEmoji(cell.id)}>\n                    {cell.emoji}\n                </div>)\n            })\n            return (\n                <>\n                <div className=\"grid-container\">\n                    {ligne}\n                </div>\n                <div className=\"btn-container\">\n                    <button id=\"btn-add-plant\" type=\"submit\" onClick={this.addPlant}>Plant an Emoji</button>\n                </div>\n                </>\n            )\n    }\n}\n\nexport default Garden;","import React from 'react'\nimport './App.css'\nimport Garden from \"./Garden\"\n\nclass App extends React.Component {\n  constructor(props) {\n      super(props);\n      this.state = { farm: [] }\n      this.SIZE_GARDEN = 25\n      //garden: Array.from(Array(25).keys())\n  }\n\n  generateGarden = (size) => {\n      let newGarden = []\n      for (let i = 0; i < size; i++) {\n          newGarden.push({ id: i, emoji: \"\"})\n      }\n      return newGarden\n  }\n\n  addGarden = (size) => {\n      let newFarm = [...this.state.farm]\n      newFarm.push(this.generateGarden(size))\n      this.setState( {farm: newFarm} )\n  }\n\n  componentDidMount() {\n      //this.setState({ garden: this.generateGarden(size_garden)})\n      this.addGarden(this.SIZE_GARDEN)\n      //this.setState( {} )\n  }\n\n  componentDidUpdate() {\n      console.log(\"farm\", this.state.farm)\n  }\n\n  render() {\n    return (\n      <>\n      <h1>F... this Emojis Garden</h1>\n\n      <div className=\"btn-container\">\n          <button onClick={() => this.addGarden(this.SIZE_GARDEN)} id=\"btn-add-garden\" type=\"submit\" >Add a garden</button>\n      </div>\n\n      {this.state.farm.map((elem) => {\n          return (\n              <div className=\"gdn-container\">\n                  <Garden garden={elem} />\n              </div>\n          )\n      })}\n      </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}